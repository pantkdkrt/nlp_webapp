'use strict';

var _ = require('lodash');
var gulp = require('gulp');

var source = require('vinyl-source-stream');
var buffer = require('vinyl-buffer');
var shimify = require('browserify-shim');
var plumber = require('gulp-plumber');
var uglify = require('gulp-uglify');
var browserify = require('browserify');
var watchify = require('watchify');
var derequire = require('gulp-derequire');
var gutil = require('gulp-util');
var gulpif = require('gulp-if');
var del = require('del');

var notifier = require('node-notifier');

var path = require('path');

var conf = require('./conf');

var cached = {};

// error handler
function error(err) {
    notifier.notify({message: 'Error: ' + err.message});
    gutil.log(gutil.colors.red('Error: ' + err));
    this.emit('end');
}

function buildScript(filename, mode) {
    var bundleFilename = 'index.js';

    var browserifyConfig = {
        standalone: 'fpModule'
    };

    var bundler;

    if (mode === 'dev') {
        bundler = browserify(filename, _.extend(browserifyConfig, { debug: true }));
    } else if (mode === 'prod') {
        bundler = browserify(filename, browserifyConfig);
    } else if (mode === 'watch') {
        if (cached[filename]) {
            return cached[filename].bundle();
        }

        bundler = watchify(browserify(filename, _.extend(browserifyConfig, watchify.args, { debug: true })));
        cached[filename] = bundler;
    }

    function rebundle() {
        var stream = bundler.bundle()
            .on('error', function(err) {
                error.call(this, err);
            });

        return stream
            .pipe(plumber({ errorHandler: error }))
            .pipe(source(bundleFilename))
            .pipe(derequire())
            .pipe(buffer())
            .pipe(gulpif(mode === 'prod', uglify({ mangle: true })))
            .pipe(gulp.dest(conf.paths.tmp));
    }

    // listen for an update and run rebundle
    bundler.on('update', function() {
        rebundle();
        gutil.log('Rebundle...');
    });

    // run it once the first time buildScript is called
    return rebundle();
}

var entryFile = path.join(conf.paths.src, '/index.js');

gulp.task('build:dev', function() {
    return buildScript(entryFile, 'dev');
});

gulp.task('build:watch', function() {
    return buildScript(entryFile, 'watch');
});

gulp.task('build:prod', function() {
    return buildScript(entryFile, 'prod');
});

gulp.task('clean:tmp', function() {
    return del([
        conf.paths.tmp
    ]);
});

gulp.task('clean:dist', function() {
    return del([
        conf.paths.dist
    ]);
});
