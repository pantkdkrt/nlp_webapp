[{"/Users/conan/Desktop/nlp_web/my-app/src/index.js":"1","/Users/conan/Desktop/nlp_web/my-app/src/App.js":"2","/Users/conan/Desktop/nlp_web/my-app/src/reportWebVitals.js":"3","/Users/conan/Desktop/nlp_web/my-app/src/Screens/APIDetail.js":"4","/Users/conan/Desktop/nlp_web/my-app/src/Components/Nav.js":"5","/Users/conan/Desktop/nlp_web/my-app/src/Screens/Home.js":"6","/Users/conan/Documents/GitHub/nlp_webapp/my-app/src/index.js":"7","/Users/conan/Documents/GitHub/nlp_webapp/my-app/src/reportWebVitals.js":"8","/Users/conan/Documents/GitHub/nlp_webapp/my-app/src/App.js":"9","/Users/conan/Documents/GitHub/nlp_webapp/my-app/src/Screens/Home.js":"10","/Users/conan/Documents/GitHub/nlp_webapp/my-app/src/Components/Nav.js":"11","/Users/conan/Documents/GitHub/nlp_webapp/my-app/src/Screens/APIDetail.js":"12"},{"size":500,"mtime":1644721024630,"results":"13","hashOfConfig":"14"},{"size":651,"mtime":1645590865242,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1644721024631,"results":"16","hashOfConfig":"14"},{"size":306,"mtime":1645170468490,"results":"17","hashOfConfig":"14"},{"size":492,"mtime":1645590902127,"results":"18","hashOfConfig":"14"},{"size":5934,"mtime":1645611862910,"results":"19","hashOfConfig":"14"},{"size":500,"mtime":1644721024630,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":1644721024631,"results":"22","hashOfConfig":"21"},{"size":651,"mtime":1645590865242,"results":"23","hashOfConfig":"21"},{"size":10281,"mtime":1645719277442,"results":"24","hashOfConfig":"21"},{"size":492,"mtime":1645590902127,"results":"25","hashOfConfig":"21"},{"size":3535,"mtime":1645691839839,"results":"26","hashOfConfig":"21"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1i0vzzi",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"gsuep1",{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/conan/Desktop/nlp_web/my-app/src/index.js",[],[],"/Users/conan/Desktop/nlp_web/my-app/src/App.js",["67"],[],"/Users/conan/Desktop/nlp_web/my-app/src/reportWebVitals.js",[],[],"/Users/conan/Desktop/nlp_web/my-app/src/Screens/APIDetail.js",[],[],"/Users/conan/Desktop/nlp_web/my-app/src/Components/Nav.js",["68"],[],"/Users/conan/Desktop/nlp_web/my-app/src/Screens/Home.js",[],[],"/Users/conan/Documents/GitHub/nlp_webapp/my-app/src/index.js",[],[],["69","70"],"/Users/conan/Documents/GitHub/nlp_webapp/my-app/src/reportWebVitals.js",[],[],"/Users/conan/Documents/GitHub/nlp_webapp/my-app/src/App.js",["71"],[],"import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nimport Home from \"./Screens/Home\";\nimport APIDetail from \"./Screens/APIDetail\";\n\n\nimport Nav from \"./Components/Nav\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Nav />\n        <div className=\"content\">\n          <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"/how2api\" element={<APIDetail />} />\n          </Routes>\n        </div>\n      </div>\n    </BrowserRouter>\n  );\n}\n//export default App;\nexport default () => {\n  return <App />;\n};\n","/Users/conan/Documents/GitHub/nlp_webapp/my-app/src/Screens/Home.js",["72"],[],"import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { Container, Form, Button, Row, Col, Card } from \"react-bootstrap\";\n//const baseURL = \"http://127.0.0.1:5000\";\nconst baseURLTask1 = \"http://nlp1.the-scamper.superai.me:10100/word\";\nconst baseURLTask2 = \"http://nlp1.the-scamper.superai.me:10200/pos\";\nconst baseURLTask3 = \"http://nlp1.the-scamper.superai.me:10300/ner\";\n\nfunction Home() {\n  const [TextInputWS, setTextInputWS] = useState();\n  const [TextInputSS, setTextInputSS] = useState();\n  const [TextInputNER, setTextInputNER] = useState();\n  const [TextInputPOS, setTextInputPOS] = useState();\n  const [post, setPost] = useState();\n  const [post2, setPost2] = useState();\n  const [post3, setPost3] = useState();\n  const [post4, setPost4] = useState();\n  const [TxtFile, setTxtFile] = useState();\n  const [TxtFile2, setTxtFile2] = useState();\n\n  const showFile = (e) => {\n    e.preventDefault();\n    //setTxtFileName(e.target.files[0].name)\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const text = e.target.result;\n      console.log(text);\n      setTxtFile(text);\n    };\n    reader.readAsText(e.target.files[0]);\n  };\n\n  function splitArrayIntoChunksOfLen(arr, len) {\n    var chunks = [],\n      i = 0,\n      n = arr.length;\n    while (i < n) {\n      chunks.push(arr.slice(i, (i += len)));\n    }\n    return chunks;\n  }\n\n  const showFile2 = (e) => {\n    e.preventDefault();\n    //setTxtFileName(e.target.files[0].name)\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const text = e.target.result.replace(/ /g, \"\");\n      const text2 = text.split(\"\\n\"); //.replace(/(\\r\\n|\\n|\\r)/gm,\" \");\n      const text3 = text2.toString();\n      const text4 = text3.split(\",\");\n      console.log(text2);\n\n      const long = splitArrayIntoChunksOfLen(text4, 50);\n      setTxtFile2(long);\n\n      console.log(long);\n    };\n    reader.readAsText(e.target.files[0]);\n  };\n\n  function createPost() {\n    axios\n      .post(baseURLTask1, {\n        title: TextInputWS,\n      })\n      .then((response) => {\n        setPost(response.data);\n      });\n    console.log(post);\n  }\n\n  //if (!post) return null;\n  function createPost2() {\n    axios\n      .post(baseURLTask2, {\n        sentence: TextInputPOS,\n      })\n      .then((response) => {\n        setPost2(response.data);\n      });\n    console.log(post2);\n  }\n\n  function createPost22() {\n    axios\n      .post(baseURLTask2, {\n        sentence: TxtFile,\n      })\n      .then((response) => {\n        setPost2(response.data);\n      });\n    console.log(post2);\n  }\n\n  function createPost3() {\n    axios\n      .post(baseURLTask3, {\n        sentence: TextInputNER,\n      })\n      .then((response) => {\n        setPost3(response.data);\n      });\n    console.log(post3);\n  }\n\n  function createPost32() {\n    const output = [];\n    for (let i in TxtFile2) {\n      axios\n        .post(baseURLTask3, {\n          sentence: TxtFile2[i],\n        })\n        .then((response) => {\n          output.push(response.data);\n        });\n    }\n\n    setPost4(output.reverse());\n    console.log(post4);\n  }\n\n  return (\n    <Container fluid>\n      <Row style={{ backgroundColor: \"#DABBFF\" }}>\n        <Col>\n          <h1>APIs Demo</h1>\n        </Col>\n      </Row>\n      <Row\n        style={{\n          padding: \"1rem\",\n          height: \"30rem\",\n          backgroundColor: \"#B7F0FF\",\n          maxHeight: \"35rem\",\n        }}\n      >\n        <h2>1. Word Segmentation</h2>\n        <Col lg={5}>\n          <Form>\n            <Form.Group\n              className=\"mb-3\"\n              controlId=\"exampleForm.ControlTextarea1\"\n            >\n              <Form.Label>Input</Form.Label>\n              <Form.Control\n                as=\"textarea\"\n                rows={3}\n                onChange={(e) => {\n                  setTextInputWS(e.target.value);\n                }}\n              />\n            </Form.Group>\n            <Button onClick={createPost}>Go</Button>\n          </Form>\n        </Col>\n        <Col lg={7}>\n          <Card className=\"output-card-1\">\n            <Card.Header>Output</Card.Header>\n            <Card.Body style={{ height: \"10rem\", overflowY: \"auto\" }}>\n              {post &&\n                post.map((v, i) => (\n                  <span\n                    style={{\n                      margin: \"1rem\",\n                      padding: \"0.5rem\",\n                      backgroundColor: \"#EEBFFF\",\n                    }}\n                    key={i}\n                  >\n                    {v.map((a, b) => (\n                      <span\n                        style={{\n                          margin: \"1rem\",\n                          padding: \"0.5rem\",\n                          backgroundColor: \"#EEBFFF\",\n                        }}\n                        key={b}\n                      >\n                        {a[0]}:{a[1]}\n                      </span>\n                    ))}\n                  </span>\n                ))}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n      <Row\n        style={{\n          padding: \"1rem\",\n          height: \"30rem\",\n          backgroundColor: \"#FFD7C3\",\n          maxHeight: \"35rem\",\n        }}\n      >\n        <h2>2. POS Tagging</h2>\n        <Col lg={6}>\n          <Form>\n            <Form.Group\n              className=\"mb-3\"\n              controlId=\"exampleForm.ControlTextarea1\"\n            >\n              <Form.Label>Input</Form.Label>\n              <Form.Control\n                as=\"textarea\"\n                rows={3}\n                onChange={(e) => {\n                  setTextInputPOS(e.target.value);\n                }}\n              />\n            </Form.Group>\n            <Button onClick={createPost2}>Go</Button>\n          </Form>\n          <Form>\n            <Form.Group controlId=\"formFileLg\" className=\"mb-3\">\n              <Form.Label>Please upload your text file.</Form.Label>\n              <Form.Control\n                type=\"file\"\n                size=\"lg\"\n                onChange={showFile}\n                multiple={false}\n              />\n            </Form.Group>\n\n            <Button onClick={createPost22}>Go</Button>\n          </Form>\n        </Col>\n        <Col lg={6}>\n          <Card>\n            <Card.Header>Output</Card.Header>\n            <Card.Body style={{ height: \"10rem\", overflowY: \"auto\" }}>\n              {post2 &&\n                post2.map((v, i) => (\n                  <span\n                    style={{\n                      margin: \"1rem\",\n                      padding: \"0.5rem\",\n                      backgroundColor: \"#EEBFFF\",\n                    }}\n                    key={i}\n                  >\n                    {v[0]}:{v[1]}\n                  </span>\n                ))}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n      <Row\n        style={{\n          padding: \"1rem\",\n          height: \"35rem\",\n          backgroundColor: \"#FFC3F3\",\n          maxHeight: \"40rem\",\n        }}\n      >\n        <h2>3. NER Tagging</h2>\n        <Col lg={6}>\n          <Form>\n            <Form.Group\n              className=\"mb-3\"\n              controlId=\"exampleForm.ControlTextarea1\"\n            >\n              <Form.Label>Input</Form.Label>\n              <Form.Control\n                as=\"textarea\"\n                rows={3}\n                onChange={(e) => {\n                  setTextInputNER(e.target.value);\n                }}\n              />\n            </Form.Group>\n            <Button onClick={createPost3}>Go</Button>\n          </Form>\n          <Form>\n            <Form.Group controlId=\"formFileLg\" className=\"mb-3\">\n              <Form.Label>Please upload your text file.</Form.Label>\n              <Form.Control\n                type=\"file\"\n                size=\"lg\"\n                onChange={showFile2}\n                multiple={false}\n              />\n            </Form.Group>\n\n            <Button onClick={createPost32}>Go</Button>\n          </Form>\n        </Col>\n        <Col lg={6}>\n        <Card >\n            <Card.Header>Output from Textarea</Card.Header>\n            <Card.Body style={{ height: \"10rem\", overflowY: \"auto\" }}>\n              {post3 &&\n                post3.map((v, i) =>\n                    <span\n                      style={{\n                        margin: \"1rem\",\n                        padding: \"0.5rem\",\n                        backgroundColor: \"#EEBFFF\",\n                      }}\n                      key={i}\n                    >\n                      {v[0] + ' : ' + v[1]}\n                    </span>\n                \n                )}\n            </Card.Body>\n          </Card>\n\n          <Card style={{marginTop: '1rem'}}>\n            <Card.Header>Output from file</Card.Header>\n            <Card.Body style={{ height: \"10rem\", overflowY: \"auto\" }}>\n              {post4 &&\n                post4.map((v, i) =>\n                  v.map((a, b) => (\n                    <span\n                      style={{\n                        margin: \"1rem\",\n                        padding: \"0.5rem\",\n                        backgroundColor: \"#EEBFFF\",\n                      }}\n                      key={b}\n                    >\n                      {a[0] + ' : ' + a[1]}\n                    </span>\n                  ))\n                )}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n      <Row\n        style={{\n          padding: \"1rem\",\n          height: \"30rem\",\n          backgroundColor: \"#C2FFAC\",\n          maxHeight: \"35rem\",\n        }}\n      >\n        <h2>4. Sentence Segmentation</h2>\n        <Col lg={6}>\n          <Form>\n            <Form.Group\n              className=\"mb-3\"\n              controlId=\"exampleForm.ControlTextarea1\"\n            >\n              <Form.Label>Input</Form.Label>\n              <Form.Control\n                as=\"textarea\"\n                rows={3}\n                onChange={(e) => {\n                  setTextInputSS(e.target.value);\n                }}\n              />\n            </Form.Group>\n            <Button>Go</Button>\n          </Form>\n        </Col>\n        <Col lg={6}>\n          <Card>\n            <Card.Header>Output</Card.Header>\n            <Card.Body\n              style={{ height: \"10rem\", overflowY: \"auto\" }}\n            ></Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default Home;\n","/Users/conan/Documents/GitHub/nlp_webapp/my-app/src/Components/Nav.js",["73"],[],"import React from \"react\";\nimport { Navbar, Container } from \"react-bootstrap\";\nimport \"../Styles/nav.css\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nfunction Nav() {\n  return (\n    <Navbar className=\"nav-bar\">\n      <Container>\n        <Navbar.Brand>THE SCAMPER</Navbar.Brand>\n      </Container>\n\n      <Container>\n        <Link id=\"nav-link\" to=\"\">Demo</Link>\n        <Link id=\"nav-link\" to=\"/how2api\">How2API</Link>\n      </Container>\n    </Navbar>\n  );\n}\n\nexport default Nav;\n","/Users/conan/Documents/GitHub/nlp_webapp/my-app/src/Screens/APIDetail.js",[],[],{"ruleId":"74","severity":1,"message":"75","line":27,"column":1,"nodeType":"76","endLine":29,"endColumn":3},{"ruleId":"77","severity":1,"message":"78","line":4,"column":16,"nodeType":"79","messageId":"80","endLine":4,"endColumn":26},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"74","severity":1,"message":"75","line":27,"column":1,"nodeType":"76","endLine":29,"endColumn":3},{"ruleId":"77","severity":1,"message":"85","line":11,"column":10,"nodeType":"79","messageId":"80","endLine":11,"endColumn":21},{"ruleId":"77","severity":1,"message":"78","line":4,"column":16,"nodeType":"79","messageId":"80","endLine":4,"endColumn":26},"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","no-native-reassign",["86"],"no-negated-in-lhs",["87"],"'TextInputSS' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]